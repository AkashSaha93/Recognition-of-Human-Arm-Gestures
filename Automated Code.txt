clear all;
close all;
clear cache;
clc;

global nCh collectionInterval samplingRate windowCoff isCollecting doubleTap MyoDataSize buffer value_1_Sample_Max value_All_Sample_Min Value_All value_freq value_mean_power value_ssi;
value_1_Sample_Max = [];
value_All_Sample_Min = [];
Value_All =[];
value_freq = [];
value_mean_power = [];
value_ssi = [];
load Akashclassifier.mat ;

nCh = 8;
MyoDataSize = 50;
isCollecting = 1;    %   
samplingRate  = 200; % Myo sampling frequency
windowCoff    = 2;   % how long a letter performed in sec
collectionInterval = samplingRate*windowCoff; % Raw Data buffer size collectionInterval = sampleingRate * timeTo buffer in seconds

%% for real time experiment
doubleTap = 0;     % double tap first tap 1 second tap 0 

%% Setting up a Timer for a background process for Collecting MYO EMG Data (Control)
t=timer;
t.StartFcn       = @socket_start_Func;
t.Period         = 0.15; 
t.StartDelay     = 2;
t.StopFcn        = @socket_stop_Func;
t.TimerFcn       = @socket_read_Func;  
t.TasksToExecute = inf; 
t.ExecutionMode  = 'fixedSpacing';
start(t);

%% Try catch should be here  

% disp('START THE GAME AFTER COUNTING 3...2..1.');

% for i=1:3
try
    pause(2);
            sprintf('Start Game')
            pause(1800/1000)
%             Data_Real_Time.start_Time = clock();
              Data_Real_Time.emg = (buffer);
              
%             Data_Real_Time.stop_Time = clock();
            disp('done')
            
            pause(100/1000);
            Data = Data_Real_Time.emg;
            Wo = 60/(200/2);  BW = Wo/35; %notch filter
            [b,a] = iirnotch(Wo,BW);  
%             Data = filter(b,a,Data);
%             Data = Data-mean(Data);%Zero-mean for dc offset
            
            
                for i=1:8
                    Data(i,:) = filter(b,a,Data(i,:)); %filter apply
                    Data(i,:) = Data(i,:) - mean(Data(i,:));  %Zero mean (DC Offset)
                    MAX(i)= max(Data(i,:));
                    Min(i)= min(Data(i,:));
                    freq(i) = meanfreq(Data(i,:));
                    mean_power(i)= mean(Data(i,:).^2); %average power
                    ssi(i) = sum(Data(i,:).^2); %shifted sine integral
        
                    value_1_Sample_Max=[value_1_Sample_Max;MAX(i)'];
                    value_All_Sample_Min=[value_All_Sample_Min;Min(i)'];
                    value_freq = [value_freq;freq(i)'];
                    value_mean_power = [value_mean_power;mean_power(i)'];
                    value_ssi =  [value_ssi;ssi(i)'];
                end
                Value_All = [value_1_Sample_Max value_All_Sample_Min value_freq value_mean_power value_ssi];
                t1=1;
                t2 =8;
                for i= 1:1:(length(Value_All)/8)
                    features(i,1:8) = Value_All(t1:t2,1);
                    features(i,9:16)= Value_All(t1:t2,2);
                    features(i,17:24)=Value_All(t1:t2,3);
                    features(i,25:32)=Value_All(t1:t2,4);
                    features(i,33:40)=Value_All(t1:t2,5);
                end
                % Classification
                load Akashclassifier.mat ;
                yfit = trained_akashclassifier.predictFcn(features);
                disp(yfit);
%                 score(yfit);
                
catch
    stop(t);
    delete(t);
end

% end
% disp('Sorry, You are OUT !!!!!!');
%% Stop experiment
%pause();

%% Stop timer and delete it.
% stop(t);
% delete(t);